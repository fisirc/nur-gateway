const std = @import("std");

pub const bindings = @import("pq/binds.zig");
const PGConn = bindings.PGconn;


pub const PGConnError = error.BadConnection;
pub fn connectDbSafe(uri: [:0]const u8) !*PGConn {
    const new_connection = bindings.PQconnectdb(uri.ptr) orelse return PGConnError;
    const connection_status = bindings.PQstatus(new_connection);
    if (connection_status != bindings.CONNECTION_OK) {
        return PGConnError;
    }

    return new_connection;
}

/// Returns the error message most recently generated by an operation on the
/// connection, null if none. The connection underlyingly "owns" the memory, it
/// gets freed with it at PQFinish
pub fn getErrorMessage(conn: *PGConn) ?[]const u8 {
    const error_message = bindings.PQerrorMessage(conn);
    const error_len = std.mem.len(error_message);
    return error_message[0..error_len];
}



